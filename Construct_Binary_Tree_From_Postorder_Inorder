/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* construct(vector<int>& inorder, int is, int ie, vector<int>& postorder, int ps, int                    pe, map<int, int>& m)
    {
        if(ps > pe || is > ie)
        {
            return NULL;
        }
        
        TreeNode* root = new TreeNode(postorder[pe]);
        
        int inroot = m[postorder[pe]];
        
        root->left = construct(inorder, is, inroot-1, postorder, ps, ps+inroot-is-1, m);
        root->right = construct(inorder, inroot+1, ie, postorder, ps+inroot-is, pe-1, m);
        
        return root;
    }
    
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(inorder.size() != postorder.size())
        {
            return NULL;
        }
        
        map<int, int> m;
        
        for(int i=0; i<inorder.size(); i++)
        {
             m[inorder[i]] = i;
        }
        
        return construct(inorder, 0, inorder.size()-1, postorder, 0, postorder.size()-1, m);
    }
};
