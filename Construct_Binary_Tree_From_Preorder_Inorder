/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* constructTree(vector<int>& preorder, int preStart, int preEnd, vector<int>& inorder, 
                           int inStart, int inEnd, map<int, int>& m)
    {
        if(preStart>preEnd || inStart>inEnd)
        {
            return NULL;
        }
        
        TreeNode* root = new TreeNode(preorder[preStart]);
        int inroot = m[root->val];
        int n = inroot - inStart;
        
        root->left = constructTree(preorder, preStart+1, preStart+n, inorder, inStart, inroot-1, m);
        root->right = constructTree(preorder, preStart+n+1, preEnd, inorder, inroot+1, inEnd, m);
        
        return root;
    }
    
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int preStart = 0, preEnd = preorder.size()-1;
        int inStart = 0, inEnd = inorder.size()-1;
        map<int, int> m;
        
        for(int i=inStart; i<=inEnd; i++)
        {
            m[inorder[i]] = i;
        }
        
        return constructTree(preorder, preStart, preEnd, inorder, inStart, inEnd, m);
    }
};
